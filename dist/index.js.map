{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/mediansorted.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// MAIN //\n\n/**\n* Computes the median value of a sorted strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - strideX length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} median value\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = mediansorted( 4, arraylike2object( x ), 2, 1 );\n* // returns 0.0\n*/\nfunction mediansorted( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar n;\n\tvar m;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\n\t// Cache references to element accessors:\n\txget = x.accessors[ 0 ];\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tn = N / 2;\n\tm = floor( n );\n\tif ( n === m ) {\n\t\t// Even number of elements...\n\t\treturn ( xget( xbuf, offsetX+(m * strideX) ) + xget( xbuf, offsetX+((m-1) * strideX) ) ) / 2.0;\n\t}\n\t// Odd number of elements...\n\treturn xget( xbuf, offsetX+(m * strideX) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = mediansorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Computes the median value of a sorted strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - sorted input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} median value\n*\n* @example\n* var x = [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = mediansorted( 4, x, 2, 1 );\n* // returns 0.0\n*/\nfunction mediansorted( N, x, strideX, offsetX ) {\n\tvar n;\n\tvar m;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tn = N / 2;\n\tm = floor( n );\n\tif ( n === m ) {\n\t\t// Even number of elements...\n\t\treturn ( x[ offsetX+(m*strideX) ] + x[ offsetX+((m-1)*strideX) ] ) / 2.0;\n\t}\n\t// Odd number of elements...\n\treturn x[ offsetX+(m*strideX) ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = mediansorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the median value of a sorted strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - sorted input array\n* @param {integer} strideX - strideX length\n* @returns {number} median value\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* var v = mediansorted( x.length, x, 1 );\n* // returns 2.0\n*/\nfunction mediansorted( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = mediansorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar mediansorted = require( './mediansorted.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( mediansorted, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = mediansorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the median value of a sorted strided array.\n*\n* @module @stdlib/stats-base-mediansorted\n*\n* @example\n* var mediansorted = require( '@stdlib/stats-base-mediansorted' );\n*\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* var v = mediansorted( x.length, x, 1 );\n* // returns 2.0\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var mediansorted = require( '@stdlib/stats-base-mediansorted' );\n*\n* var x = [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = mediansorted.ndarray( N, x, 2, 1 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar mediansorted = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = mediansorted;\n\n// exports: { \"ndarray\": \"mediansorted.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EA0BvD,SAASC,EAAcC,EAAGC,EAAGC,EAASC,EAAU,CAC/C,IAAIC,EACAC,EACAC,EACAC,EAQJ,OALAH,EAAOH,EAAE,KAGTI,EAAOJ,EAAE,UAAW,CAAE,EAEjBD,GAAK,EACF,KAERM,EAAIN,EAAI,EACRO,EAAIT,EAAOQ,CAAE,EACRA,IAAMC,GAEDF,EAAMD,EAAMD,EAASI,EAAIL,CAAS,EAAIG,EAAMD,EAAMD,GAAUI,EAAE,GAAKL,CAAS,GAAM,EAGrFG,EAAMD,EAAMD,EAASI,EAAIL,CAAS,EAC1C,CAKAL,EAAO,QAAUE,IC5EjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAmB,QAAS,qCAAsC,EAClEC,EAAY,IAoBhB,SAASC,EAAcC,EAAGC,EAAGC,EAASC,EAAU,CAC/C,IAAI,EACAC,EACAC,EAEJ,OAAKL,GAAK,EACF,KAERK,EAAIR,EAAkBI,CAAE,EACnBI,EAAE,iBACCP,EAAWE,EAAGK,EAAGH,EAASC,CAAQ,GAE1C,EAAIH,EAAI,EACRI,EAAIR,EAAO,CAAE,EACR,IAAMQ,GAEDH,EAAGE,EAASC,EAAEF,CAAS,EAAID,EAAGE,GAAUC,EAAE,GAAGF,CAAS,GAAM,EAG/DD,EAAGE,EAASC,EAAEF,CAAS,GAC/B,CAKAP,EAAO,QAAUI,ICrEjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAmBd,SAASC,EAAcC,EAAGC,EAAGC,EAAU,CACtC,OAAOJ,EAASE,EAAGC,EAAGC,EAASL,EAAeG,EAAGE,CAAQ,CAAE,CAC5D,CAKAN,EAAO,QAAUG,ICjDjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAe,IACfC,EAAU,IAKdF,EAAaC,EAAc,UAAWC,CAAQ,EAK9CH,EAAO,QAAUE,ICYjB,IAAIE,EAAe,IAKnB,OAAO,QAAUA",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "floor", "mediansorted", "N", "x", "strideX", "offsetX", "xbuf", "xget", "n", "m", "require_ndarray", "__commonJSMin", "exports", "module", "floor", "arraylike2object", "accessors", "mediansorted", "N", "x", "strideX", "offsetX", "m", "o", "require_mediansorted", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "mediansorted", "N", "x", "strideX", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "mediansorted", "ndarray", "mediansorted"]
}
