{
  "version": 3,
  "sources": ["../lib/mediansorted.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// MAIN //\n\n/**\n* Computes the median value of a sorted strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - sorted input array\n* @param {integer} stride - stride length\n* @returns {number} median value\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* var v = mediansorted( x.length, x, 1 );\n* // returns 2.0\n*/\nfunction mediansorted( N, x, stride ) {\n\tvar offset;\n\tvar n;\n\tvar m;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tn = N / 2;\n\tm = floor( n );\n\tif ( n === m ) {\n\t\t// Even number of elements...\n\t\treturn ( x[ offset+(m*stride) ] + x[ offset+((m-1)*stride) ] ) / 2.0;\n\t}\n\t// Odd number of elements...\n\treturn x[ offset+(m*stride) ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = mediansorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// MAIN //\n\n/**\n* Computes the median value of a sorted strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - sorted input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} median value\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = mediansorted( N, x, 2, 1 );\n* // returns 0.0\n*/\nfunction mediansorted( N, x, stride, offset ) {\n\tvar n;\n\tvar m;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tn = N / 2;\n\tm = floor( n );\n\tif ( n === m ) {\n\t\t// Even number of elements...\n\t\treturn ( x[ offset+(m*stride) ] + x[ offset+((m-1)*stride) ] ) / 2.0;\n\t}\n\t// Odd number of elements...\n\treturn x[ offset+(m*stride) ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = mediansorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar mediansorted = require( './mediansorted.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( mediansorted, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = mediansorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the median value of a sorted strided array.\n*\n* @module @stdlib/stats-base-mediansorted\n*\n* @example\n* var mediansorted = require( '@stdlib/stats-base-mediansorted' );\n*\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* var v = mediansorted( x.length, x, 1 );\n* // returns 2.0\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var mediansorted = require( '@stdlib/stats-base-mediansorted' );\n*\n* var x = [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = mediansorted.ndarray( N, x, 2, 1 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar mediansorted = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = mediansorted;\n\n// exports: { \"ndarray\": \"mediansorted.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EAmBvD,SAASC,EAAcC,EAAGC,EAAGC,EAAS,CACrC,IAAIC,EACAC,EACAC,EAEJ,OAAKL,GAAK,EACF,KAEHE,EAAS,EACbC,GAAU,EAAEH,GAAKE,EAEjBC,EAAS,EAEVC,EAAIJ,EAAI,EACRK,EAAIP,EAAOM,CAAE,EACRA,IAAMC,GAEDJ,EAAGE,EAAQE,EAAEH,CAAQ,EAAID,EAAGE,GAASE,EAAE,GAAGH,CAAQ,GAAM,EAG3DD,EAAGE,EAAQE,EAAEH,CAAQ,EAC7B,CAKAL,EAAO,QAAUE,ICnEjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EAuBvD,SAASC,EAAcC,EAAGC,EAAGC,EAAQC,EAAS,CAC7C,IAAIC,EACAC,EAEJ,OAAKL,GAAK,EACF,KAERI,EAAIJ,EAAI,EACRK,EAAIP,EAAOM,CAAE,EACRA,IAAMC,GAEDJ,EAAGE,EAAQE,EAAEH,CAAQ,EAAID,EAAGE,GAASE,EAAE,GAAGH,CAAQ,GAAM,EAG3DD,EAAGE,EAAQE,EAAEH,CAAQ,EAC7B,CAKAL,EAAO,QAAUE,ICjEjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAe,IACfC,EAAU,IAKdF,EAAaC,EAAc,UAAWC,CAAQ,EAK9CH,EAAO,QAAUE,ICYjB,IAAIE,EAAe,IAKnB,OAAO,QAAUA",
  "names": ["require_mediansorted", "__commonJSMin", "exports", "module", "floor", "mediansorted", "N", "x", "stride", "offset", "n", "m", "require_ndarray", "__commonJSMin", "exports", "module", "floor", "mediansorted", "N", "x", "stride", "offset", "n", "m", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "mediansorted", "ndarray", "mediansorted"]
}
